// This file was generated by counterfeiter
package webfakes

import (
	"net/http"
	"sync"

	"github.com/concourse/atc/web"
)

type FakeHTTPHandlerWithError struct {
	ServeHTTPStub        func(w http.ResponseWriter, r *http.Request) error
	serveHTTPMutex       sync.RWMutex
	serveHTTPArgsForCall []struct {
		w http.ResponseWriter
		r *http.Request
	}
	serveHTTPReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHTTPHandlerWithError) ServeHTTP(w http.ResponseWriter, r *http.Request) error {
	fake.serveHTTPMutex.Lock()
	fake.serveHTTPArgsForCall = append(fake.serveHTTPArgsForCall, struct {
		w http.ResponseWriter
		r *http.Request
	}{w, r})
	fake.recordInvocation("ServeHTTP", []interface{}{w, r})
	fake.serveHTTPMutex.Unlock()
	if fake.ServeHTTPStub != nil {
		return fake.ServeHTTPStub(w, r)
	} else {
		return fake.serveHTTPReturns.result1
	}
}

func (fake *FakeHTTPHandlerWithError) ServeHTTPCallCount() int {
	fake.serveHTTPMutex.RLock()
	defer fake.serveHTTPMutex.RUnlock()
	return len(fake.serveHTTPArgsForCall)
}

func (fake *FakeHTTPHandlerWithError) ServeHTTPArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.serveHTTPMutex.RLock()
	defer fake.serveHTTPMutex.RUnlock()
	return fake.serveHTTPArgsForCall[i].w, fake.serveHTTPArgsForCall[i].r
}

func (fake *FakeHTTPHandlerWithError) ServeHTTPReturns(result1 error) {
	fake.ServeHTTPStub = nil
	fake.serveHTTPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHTTPHandlerWithError) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.serveHTTPMutex.RLock()
	defer fake.serveHTTPMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeHTTPHandlerWithError) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ web.HTTPHandlerWithError = new(FakeHTTPHandlerWithError)
