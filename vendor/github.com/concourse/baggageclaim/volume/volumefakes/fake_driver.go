// This file was generated by counterfeiter
package volumefakes

import (
	"sync"

	"github.com/concourse/baggageclaim/volume"
)

type FakeDriver struct {
	CreateVolumeStub        func(path string) error
	createVolumeMutex       sync.RWMutex
	createVolumeArgsForCall []struct {
		path string
	}
	createVolumeReturns struct {
		result1 error
	}
	DestroyVolumeStub        func(path string) error
	destroyVolumeMutex       sync.RWMutex
	destroyVolumeArgsForCall []struct {
		path string
	}
	destroyVolumeReturns struct {
		result1 error
	}
	GetVolumeSizeInBytesStub        func(path string) (int64, error)
	getVolumeSizeInBytesMutex       sync.RWMutex
	getVolumeSizeInBytesArgsForCall []struct {
		path string
	}
	getVolumeSizeInBytesReturns struct {
		result1 int64
		result2 error
	}
	CreateCopyOnWriteLayerStub        func(path string, parent string) error
	createCopyOnWriteLayerMutex       sync.RWMutex
	createCopyOnWriteLayerArgsForCall []struct {
		path   string
		parent string
	}
	createCopyOnWriteLayerReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDriver) CreateVolume(path string) error {
	fake.createVolumeMutex.Lock()
	fake.createVolumeArgsForCall = append(fake.createVolumeArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("CreateVolume", []interface{}{path})
	fake.createVolumeMutex.Unlock()
	if fake.CreateVolumeStub != nil {
		return fake.CreateVolumeStub(path)
	} else {
		return fake.createVolumeReturns.result1
	}
}

func (fake *FakeDriver) CreateVolumeCallCount() int {
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	return len(fake.createVolumeArgsForCall)
}

func (fake *FakeDriver) CreateVolumeArgsForCall(i int) string {
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	return fake.createVolumeArgsForCall[i].path
}

func (fake *FakeDriver) CreateVolumeReturns(result1 error) {
	fake.CreateVolumeStub = nil
	fake.createVolumeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) DestroyVolume(path string) error {
	fake.destroyVolumeMutex.Lock()
	fake.destroyVolumeArgsForCall = append(fake.destroyVolumeArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("DestroyVolume", []interface{}{path})
	fake.destroyVolumeMutex.Unlock()
	if fake.DestroyVolumeStub != nil {
		return fake.DestroyVolumeStub(path)
	} else {
		return fake.destroyVolumeReturns.result1
	}
}

func (fake *FakeDriver) DestroyVolumeCallCount() int {
	fake.destroyVolumeMutex.RLock()
	defer fake.destroyVolumeMutex.RUnlock()
	return len(fake.destroyVolumeArgsForCall)
}

func (fake *FakeDriver) DestroyVolumeArgsForCall(i int) string {
	fake.destroyVolumeMutex.RLock()
	defer fake.destroyVolumeMutex.RUnlock()
	return fake.destroyVolumeArgsForCall[i].path
}

func (fake *FakeDriver) DestroyVolumeReturns(result1 error) {
	fake.DestroyVolumeStub = nil
	fake.destroyVolumeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) GetVolumeSizeInBytes(path string) (int64, error) {
	fake.getVolumeSizeInBytesMutex.Lock()
	fake.getVolumeSizeInBytesArgsForCall = append(fake.getVolumeSizeInBytesArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("GetVolumeSizeInBytes", []interface{}{path})
	fake.getVolumeSizeInBytesMutex.Unlock()
	if fake.GetVolumeSizeInBytesStub != nil {
		return fake.GetVolumeSizeInBytesStub(path)
	} else {
		return fake.getVolumeSizeInBytesReturns.result1, fake.getVolumeSizeInBytesReturns.result2
	}
}

func (fake *FakeDriver) GetVolumeSizeInBytesCallCount() int {
	fake.getVolumeSizeInBytesMutex.RLock()
	defer fake.getVolumeSizeInBytesMutex.RUnlock()
	return len(fake.getVolumeSizeInBytesArgsForCall)
}

func (fake *FakeDriver) GetVolumeSizeInBytesArgsForCall(i int) string {
	fake.getVolumeSizeInBytesMutex.RLock()
	defer fake.getVolumeSizeInBytesMutex.RUnlock()
	return fake.getVolumeSizeInBytesArgsForCall[i].path
}

func (fake *FakeDriver) GetVolumeSizeInBytesReturns(result1 int64, result2 error) {
	fake.GetVolumeSizeInBytesStub = nil
	fake.getVolumeSizeInBytesReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeDriver) CreateCopyOnWriteLayer(path string, parent string) error {
	fake.createCopyOnWriteLayerMutex.Lock()
	fake.createCopyOnWriteLayerArgsForCall = append(fake.createCopyOnWriteLayerArgsForCall, struct {
		path   string
		parent string
	}{path, parent})
	fake.recordInvocation("CreateCopyOnWriteLayer", []interface{}{path, parent})
	fake.createCopyOnWriteLayerMutex.Unlock()
	if fake.CreateCopyOnWriteLayerStub != nil {
		return fake.CreateCopyOnWriteLayerStub(path, parent)
	} else {
		return fake.createCopyOnWriteLayerReturns.result1
	}
}

func (fake *FakeDriver) CreateCopyOnWriteLayerCallCount() int {
	fake.createCopyOnWriteLayerMutex.RLock()
	defer fake.createCopyOnWriteLayerMutex.RUnlock()
	return len(fake.createCopyOnWriteLayerArgsForCall)
}

func (fake *FakeDriver) CreateCopyOnWriteLayerArgsForCall(i int) (string, string) {
	fake.createCopyOnWriteLayerMutex.RLock()
	defer fake.createCopyOnWriteLayerMutex.RUnlock()
	return fake.createCopyOnWriteLayerArgsForCall[i].path, fake.createCopyOnWriteLayerArgsForCall[i].parent
}

func (fake *FakeDriver) CreateCopyOnWriteLayerReturns(result1 error) {
	fake.CreateCopyOnWriteLayerStub = nil
	fake.createCopyOnWriteLayerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDriver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	fake.destroyVolumeMutex.RLock()
	defer fake.destroyVolumeMutex.RUnlock()
	fake.getVolumeSizeInBytesMutex.RLock()
	defer fake.getVolumeSizeInBytesMutex.RUnlock()
	fake.createCopyOnWriteLayerMutex.RLock()
	defer fake.createCopyOnWriteLayerMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDriver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ volume.Driver = new(FakeDriver)
